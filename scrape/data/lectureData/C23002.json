{
  "subjectName": "先進情報専門演習・基盤II[IP・2]",
  "instructors": [
    "山元進(コンピュータサイエンス学部コンピュータサイエンス学科)"
  ],
  "courseCategory": "専門教育科目",
  "courseType": "講義・演習科目",
  "timetableCode": "C23002",
  "semester": "2025年度 後期",
  "schedule": [
    {
      "day": "木",
      "period": 4
    },
    {
      "day": "木",
      "period": 5
    }
  ],
  "department": [
    "コンピュータサイエンス学部コンピュータサイエンス学科"
  ],
  "grade": [
    2,
    3,
    4
  ],
  "credits": 3,
  "classroom": "研究棟Ａ５０２",
  "lastUpdated": "2025/02/03",
  "overview": "IoT などのネットワーク技術の進歩に伴い、世の中には大量のデータが溢れかえっている。本演習では、大量の（数値）データを処理する方法の初歩を学び、実際にプログラミングして動作させることにより技術の習得を図る。 プログラミング言語には&nbsp;&nbsp;C++ を用い、スレッドを利用した並列化、プロセスを利用した並列化などの基礎を学ぶ。また、並列化タスクの粒度、などの基本的な考え方を身につける。プログラミングを通して論理的な思考力を涵養し、主に、処理の技術を修得することで、問題解決力、分析・評価能力が身につく。",
  "objectives": "大量データを処理する方法の基礎を理解する（論理的な思考力、 問題解決力、 分析・評価能力）. 簡単な問題に対してその知識が適用できるようになる（問題解決力、 実学に基づく専門能力）。",
  "teachingMethod": "理論を学び、その実践としてプログラミングを行いデータの解析などを行う。",
  "notes": "必ず PC 持参のこと。 レポート課題は必ず期限内に提出すること．復習・予習を十分に行うこと。",
  "preparation": "C++ を使いはするが、それほど高度な使い方はしないので、既習であるはずの Python との差異は必要に応じて簡単に説明する。最低限、Python のプログラミングで修得したことは復習しておくこと。特に、リストの取り扱いや反復処理(ループ構造)の理解は大量データの処理に対して基本中の基本である。C++未習の学生は、C++ の仕様を調べておけば、学修をより進めやすくなる。 講義後、必ず復習して、学修内容を整理すること。 講義前に資料を配布するので、それに目を通しておき分かりにくそうなところの目星をつけておけば、講義が理解しやすくなる。",
  "evaluation": "レポートの成績70%、演習課題30%の割合で素点を100点満点に換算し、成績評価を行う。60点以上が単位認定の要件となる。 なお、提出された演習課題については、次回にサンプルプログラムを公表し、レポートについては、総評を公表してフィードバックを行う。",
  "textbook": "教科書は指定しない。講義資料をmoodleにて配布する。",
  "referenceMaterials": "指定しない",
  "schedulePlan": "第1回： CUI によるコンピュータ操作の初歩 第2回： Linux の初歩 第3回： C++ による簡単なプログラミング 第4回： process と thread 第5回： 並列処理の初歩 第6回： thread による並列処理 第7回：&nbsp;&nbsp;data parallelism 第8回：&nbsp;&nbsp;OpenMP の初歩 第9回：&nbsp;&nbsp;OpenMP を用いた並列計算1(ほぼ独立した計算の並列化) 第10回： OpenMP を用いた並列計算2(リダクションのある例) 第11回： 行列・ベクトル積、行列・行列積の計算 第12回： 行列・ベクトル積の並列化 第13回： 行列・行列積の並列化 第14回： 総合演習（まとめ）"
}